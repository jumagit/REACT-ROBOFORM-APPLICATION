{"version":3,"sources":["components/Card.js","components/CardList.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","id","name","username","email","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","users","_this3","FilteredRobots","filter","toLowerCase","includes","length","style","fontSize","Search","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAmBeA,EAjBF,SAAAC,GAA8B,IAA5BC,EAA4BD,EAA5BC,GAAGC,EAAyBF,EAAzBE,KAAKC,EAAoBH,EAApBG,SAASC,EAAWJ,EAAXI,MAE5B,OAEIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yDACXH,EAAAC,EAAAC,cAAA,OAAME,IAAG,wBAAAC,OAA0BT,GAAMU,IAAI,QAASH,UAAU,OAEhEH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,UAAKN,GACLI,EAAAC,EAAAC,cAAA,SAAIH,MCYLQ,EAvBE,SAAAZ,GAAc,IAAZa,EAAYb,EAAZa,OAInB,OACIR,EAAAC,EAAAC,cAAA,WAEHM,EAAOC,IAAK,SAACC,EAAKC,GACf,OAASX,EAAAC,EAAAC,cAACU,EAAD,CACDC,IAAKF,EACLf,GAAIY,EAAOG,GAAGf,GACdC,KAAMW,EAAOG,GAAGd,KAChBE,MAAO,CAACY,GAAGZ,MACXD,SAAU,CAACa,GAAGb,eCOXgB,EApBG,SAAAnB,GAAiCA,EAA/BoB,YAA+B,IAAlBC,EAAkBrB,EAAlBqB,aAC7B,OAEIhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEXH,EAAAC,EAAAC,cAAA,SAEAe,KAAK,SACLd,UAAW,oCACXe,YAAY,cACZC,SAAUH,MCwCPI,qBA5CX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAaJI,eAAiB,SAACC,GACjBR,EAAKS,SAAS,CAACf,YAAac,EAAME,OAAOC,SAbtCX,EAAKY,MAAQ,CACTlB,YAAY,GACZP,OAAO,IAJFa,mFAQM,IAAAa,EAAAV,KACfW,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAGA,EAASC,SACzBF,KAAK,SAAAG,GAAK,OAAIL,EAAKJ,SAAS,CAACtB,OAAO+B,uCAQjC,IAAAC,EAAAhB,KACEiB,EAAiBjB,KAAKS,MAAMzB,OAAOkC,OAAQ,SAAAlC,GAC7C,OAAOA,EAAOX,KAAK8C,cAAcC,SAASJ,EAAKP,MAAMlB,YAAY4B,iBAGrE,OAAgC,IAA7BnB,KAAKS,MAAMzB,OAAOqC,OACV7C,EAAAC,EAAAC,cAAA,MAAI4C,MAAO,CAACC,SAAS,QAArB,6BAGP/C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,WACAH,EAAAC,EAAAC,cAAC8C,EAAD,CAAYhC,aAAgBQ,KAAKI,iBAGjC5B,EAAAC,EAAAC,cAAC+C,EAAD,CAAWzC,OAAUiC,YApCnBS,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OACNzD,EAAAC,EAAAC,cAACwD,EAAD,MAEDC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.4b94bd01.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({id,name,username,email}) => {\r\n\r\n    return(\r\n\r\n        <div className=\" tc bg-green dib br3 pa3 ma2 grow bw2 shadow-5 mature\">\r\n            <img  src={`https://robohash.org/${id}`} alt=\"robot\"  className=\"me\" />\r\n\r\n            <div>\r\n                <h1>{username}</h1>\r\n                <h2>{name}</h2>\r\n                <h3>{id}</h3>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList = ({robots}) => {\r\n\r\n\r\n \r\nreturn(\r\n    <div>\r\n        {\r\n robots.map( (user,i) => {\r\n    return  (<Card \r\n            key={i} \r\n            id={robots[i].id} \r\n            name={robots[i].name}\r\n            email={[i].email} \r\n            username={[i].username}\r\n         />);\r\n})\r\n\r\n        }       \r\n    </div>\r\n)\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n\r\n        <div className=\"pa2\">\r\n\r\n            <input \r\n\r\n            type=\"search\"\r\n            className =\"pa3 b--green  ba bg-lightest-blue\"\r\n            placeholder=\"Search Here\"\r\n            onChange={searchChange} \r\n            \r\n            />\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default SearchBox;","import React , {Component} from 'react';\r\nimport CardList from './components/CardList';\r\nimport SearchBox from './components/Search';\r\nimport './App.css'\r\n\r\nclass App extends Component{\r\n\r\n    //the main constructor\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            searchfield:'',\r\n            robots:[]\r\n        }\r\n    }\r\n    //component did mount\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response =>response.json())\r\n        .then(users => this.setState({robots:users}))\r\n    }\r\n//the search method\r\n    onSearchChange = (event) => {\r\n     this.setState({searchfield: event.target.value})   \r\n\r\n    }\r\n//main render function\r\n    render(){\r\n        const FilteredRobots = this.state.robots.filter( robots => {\r\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        });\r\n\r\n        if(this.state.robots.length === 0){\r\n            return <h1 style={{fontSize:'2em'}}>Loading  Please  wait ...</h1>\r\n        }else{\r\n        return(\r\n            <div>\r\n                <h1 className='f1'>JUMAGIT</h1>\r\n                <SearchBox  searchChange = {this.onSearchChange}/> \r\n\r\n                     \r\n                <CardList  robots = {FilteredRobots} />\r\n       \r\n            </div>           \r\n        )\r\n\r\n      }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n   <App/>\n\n, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}